/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _CALCULADORA_H_RPCGEN
#define _CALCULADORA_H_RPCGEN

#include <rpc/rpc.h>


#ifdef __cplusplus
extern "C" {
#endif

#define MAX_SIZE 100

struct operandos {
	struct {
		u_int values_len;
		double *values_val;
	} values;
};
typedef struct operandos operandos;

struct suma_1_argument {
	operandos op1;
	operandos op2;
};
typedef struct suma_1_argument suma_1_argument;

struct restar_1_argument {
	operandos op1;
	operandos op2;
};
typedef struct restar_1_argument restar_1_argument;

struct multiplica_1_argument {
	operandos op1;
	operandos op2;
};
typedef struct multiplica_1_argument multiplica_1_argument;

struct divide_1_argument {
	operandos op1;
	operandos op2;
};
typedef struct divide_1_argument divide_1_argument;

#define CALCULADORA 0x20000001
#define CALCULADORA_1 1

#if defined(__STDC__) || defined(__cplusplus)
#define suma 1
extern  operandos * suma_1(operandos , operandos , CLIENT *);
extern  operandos * suma_1_svc(operandos , operandos , struct svc_req *);
#define restar 2
extern  operandos * restar_1(operandos , operandos , CLIENT *);
extern  operandos * restar_1_svc(operandos , operandos , struct svc_req *);
#define multiplica 3
extern  operandos * multiplica_1(operandos , operandos , CLIENT *);
extern  operandos * multiplica_1_svc(operandos , operandos , struct svc_req *);
#define divide 4
extern  operandos * divide_1(operandos , operandos , CLIENT *);
extern  operandos * divide_1_svc(operandos , operandos , struct svc_req *);
extern int calculadora_1_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define suma 1
extern  operandos * suma_1();
extern  operandos * suma_1_svc();
#define restar 2
extern  operandos * restar_1();
extern  operandos * restar_1_svc();
#define multiplica 3
extern  operandos * multiplica_1();
extern  operandos * multiplica_1_svc();
#define divide 4
extern  operandos * divide_1();
extern  operandos * divide_1_svc();
extern int calculadora_1_freeresult ();
#endif /* K&R C */

struct producto_escalar_1_argument {
	operandos op1;
	operandos op2;
};
typedef struct producto_escalar_1_argument producto_escalar_1_argument;

struct producto_vectorial_1_argument {
	operandos op1;
	operandos op2;
};
typedef struct producto_vectorial_1_argument producto_vectorial_1_argument;

#define CALC_VEC_COMPLEJO 0x20000002
#define CALC_VEC_COMPLEJO_1 1

#if defined(__STDC__) || defined(__cplusplus)
#define producto_escalar 1
extern  operandos * producto_escalar_1(operandos , operandos , CLIENT *);
extern  operandos * producto_escalar_1_svc(operandos , operandos , struct svc_req *);
#define producto_vectorial 2
extern  operandos * producto_vectorial_1(operandos , operandos , CLIENT *);
extern  operandos * producto_vectorial_1_svc(operandos , operandos , struct svc_req *);
extern int calc_vec_complejo_1_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define producto_escalar 1
extern  operandos * producto_escalar_1();
extern  operandos * producto_escalar_1_svc();
#define producto_vectorial 2
extern  operandos * producto_vectorial_1();
extern  operandos * producto_vectorial_1_svc();
extern int calc_vec_complejo_1_freeresult ();
#endif /* K&R C */

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t xdr_operandos (XDR *, operandos*);
extern  bool_t xdr_suma_1_argument (XDR *, suma_1_argument*);
extern  bool_t xdr_restar_1_argument (XDR *, restar_1_argument*);
extern  bool_t xdr_multiplica_1_argument (XDR *, multiplica_1_argument*);
extern  bool_t xdr_divide_1_argument (XDR *, divide_1_argument*);
extern  bool_t xdr_producto_escalar_1_argument (XDR *, producto_escalar_1_argument*);
extern  bool_t xdr_producto_vectorial_1_argument (XDR *, producto_vectorial_1_argument*);

#else /* K&R C */
extern bool_t xdr_operandos ();
extern bool_t xdr_suma_1_argument ();
extern bool_t xdr_restar_1_argument ();
extern bool_t xdr_multiplica_1_argument ();
extern bool_t xdr_divide_1_argument ();
extern bool_t xdr_producto_escalar_1_argument ();
extern bool_t xdr_producto_vectorial_1_argument ();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_CALCULADORA_H_RPCGEN */
